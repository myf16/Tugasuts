# -*- coding: utf-8 -*-
"""estimasi_motor yusup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1if7yjH6PBXYw2e-Uka3Fm53gxmroE-ZT

Nama:Maulana Yusup
Kelas:Pagi B
Nim:221351076
"""


"""# Deskripsi library yang digunakan"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Memanggil Dataset"""

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/streamlit-motor-main/DataBike.csv')

"""# Deskripsi Dataset"""

df.head()

df.info()

sns.heatmap(df.isnull())

df.describe()

"""# Visualisasi Data"""

plt.figure(figsize=(10,8))
sns.heatmap(df.corr(), annot=True)

df.columns

df.ex_showroom_price.fillna(df.ex_showroom_price.mode()[0],inplace=True)

df.isnull().sum()

"""# Encoding Columns"""

df.replace({'owner':{'1st owner':0,'2nd owner':1,'3rd owner':2,'4th owner':3}},inplace=True)
df.replace({'seller_type':{'Dealer':0,'Individual':1}},inplace=True)
df

"""# Jumlah Motor Berdasarkan tahun"""

models = df.groupby('year').count()[['km_driven']].sort_values(by='km_driven', ascending=True).reset_index()
models = models.rename(columns={'km_driven':'numberOfMotors'})

fig = plt.figure(figsize=(15,5))
sns.barplot(x=models['year'], y=models['numberOfMotors'], color='royalblue')

"""# Berdasarkan nama Motor"""

nama = df.groupby('name').count()[['km_driven']].sort_values(by='km_driven', ascending=True).reset_index()
nama = nama.rename(columns={'km_driven':'count'})

plt.figure(figsize=(15,5))
sns.barplot(x=nama['name'], y=nama['count'], color='royalblue')

"""# Distribusi km_driven"""

plt.figure(figsize=(15,5))
sns.distplot(df['km_driven'])

"""# Distribusi harga Motor"""

plt.figure(figsize=(15,5))
sns.distplot(df['selling_price'])

"""# Seleksi Fitur / Data yang di inginkan"""

features = ['year', 'km_driven']
x = df[features]
y = df['selling_price']
x.shape, y.shape

"""# Spliting The Dataset"""

from sklearn.model_selection import train_test_split
x_train, X_test, y_train, y_test = train_test_split(x,y,random_state=70)
y_test.shape

"""# Membuat model Regresi Linier"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train,y_train)
pred = lr.predict(X_test)

score = lr.score(X_test, y_test)
print('Akurasi Model Regresi Linier = ', score)

"""# Membuat inputan model Regresi Linier"""

#selling_price=45000, year=2017
input_data = np.array([[45000,2017]])

prediction = lr.predict(input_data)
print('Estimasi Harga Motor : ', prediction)

"""# Menyimpan model"""

import pickle

filename = 'estimasi_motor.sav'
pickle.dump(lr,open(filename,'wb'))
